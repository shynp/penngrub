{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf370
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red217\green11\blue0;\red255\green255\blue51;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww25400\viewh13540\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs28 \cf0 \ul \ulc0 README\ulnone \
\
1. Open your terminal and change the directory on your terminal to where you would like to save the penngrub file on your computer.\
2. Go to my page on github, you will see a button that says "Clone in Mac/PC/..." with a URL of website next to it. On your terminal, write the following command without the quotes: "git clone URLFromGitHubHere"\
3. You will be asked for your github username and password. Enter them respectively. Note that when you type the password, the terminal will not be showing any response to your typing (the letters will not appear on your terminal). Thus just go ahead, type your password and hit enter.\
4. This will clone all the files from github to your computer. Cloning is only to be done the first time you would like to get files on to your computer from github.\
\
THIS WILL SET UP AND CONFIGURE YOUR ACCOUNT WITH OUT REMOTE REPO ON GITHUB. \
\
\cb2 MAJOR RULE:\cb3  DO NO WRITE CODE IN THE MASTER BRANCH\'85. AND DO NOT EVER, EVER, EVER PUSH YOUR CODE INTO MASTER ON GITHUB\cb1 \
\
Basic Git Commands (important ones are in bold):\
\pard\pardeftab720\sl440
\cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0\cf0 {\listtext	1.	}git init - to initialize a Git repository somewhere\
\ls1\ilvl0
\b {\listtext	2.	}git status - to check the current state of the project
\b0 \
\ls1\ilvl0
\b {\listtext	3.	}git add <filename> - to add the file to the staging area and start tracking changes to the file
\b0 \
{\listtext	4.	}git add .. - (2 dots) add everything in the current directory\
{\listtext	5.	}git reset <filename> - remove a file from the staging area\
\ls1\ilvl0
\b {\listtext	6.	}git commit -m "description here" - commit files in the staging area with the description in quotation marks
\b0 \
{\listtext	7.	}git add '*.txt' - wildcard add. Add all the files with the txt type. Changing txt to img will add all img files.\
{\listtext	8.	}git log - gives the log of all changes committed so far\
{\listtext	9.	}git log --summary - gives more information of all the commits so far\
{\listtext	
\b 10.	}git remote add origin <URL> - pushes the local repository to the URL of the Github server \'a0that we'll need to add a remote repository. origin is the the name of your remote repository.\
{\listtext	11.	}git push -u origin <branch name> - put the local commits in our origin to the <branch name> repository (on Github). the -u tells Git to remember the parameters so the next time you push, git will know what to do.
\b0 \
\ls1\ilvl0
\b {\listtext	12.	}git pull origin master - check changes on the master branch of the Github repository and pull down any changes into your origin branch (USE THIS TO PULL FROM THE REMOTE SITE INTO YOUR MASTER BRANCH ONLY)\
{\listtext	13.	}git stash - stash your changes (changes you don't wanna commit just yet)\
{\listtext	14.	}git stash apply - re-apply your changes after your pull\
\ls1\ilvl0
\b0 {\listtext	15.	}git diff HEAD - checks differences from the last commit\
{\listtext	16.	}git add <filename's path>\
{\listtext	17.	}git diff --staged - see changes you just staged\
{\listtext	18.	}git reset <file's path> = upstage a file using its path\
\ls1\ilvl0
\b {\listtext	19.	}git checkout -- <target> - get rid of all the changes since the last commit in the target file\
{\listtext	20.	}git branch <branch name> - add a new branch named <branch name>\
{\listtext	21.	}git checkout <branch> - switch your current branch to the following branch name\
\ls1\ilvl0
\b0 {\listtext	22.	}git rm '*.txt' - remove all the txt files from the branch you're in\
{\listtext	23.	}git rm -r <folder name> - recursively remove all the files from the folder\
\ls1\ilvl0
\b {\listtext	24.	}git commit -am "description" - commit while auto removing deleted files\
\ls1\ilvl0
\b0 {\listtext	25.	}git merge <branch name> - merge the branch with the master branch\
\ls1\ilvl0
\b {\listtext	26.	}git branch -d <branch name> - delete the branch\
{\listtext	27.	}git branch -m <old name> <new name> - rename a local branch\
}